package evo.search.view.part;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import lombok.Getter;

import javax.swing.*;
import java.awt.*;
import java.lang.reflect.Method;
import java.util.ResourceBundle;

@Getter
public class EditableList<T> {
    private static Method $$$cachedGetBundleMethod$$$ = null;
    private JList<T> list;
    private JPanel listEditBar;
    private JButton addButton;
    private JButton removeButton;
    private JButton duplicateButton;
    private JPanel editableList;
    private DefaultListModel<T> listModel = new DefaultListModel<>();

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    public EditableList() {
        list.setModel(listModel);
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        editableList = new JPanel();
        editableList.setLayout(new GridBagLayout());
        final JScrollPane scrollPane1 = new JScrollPane();
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        editableList.add(scrollPane1, gbc);
        list = new JList();
        list.setSelectionMode(0);
        scrollPane1.setViewportView(list);
        listEditBar = new JPanel();
        listEditBar.setLayout(new GridLayoutManager(1, 4, new Insets(2, 6, 0, 6), 1, -1));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        editableList.add(listEditBar, gbc);
        addButton = new JButton();
        addButton.setBorderPainted(false);
        addButton.setIcon(new ImageIcon(getClass().getResource("/icon/plus.png")));
        addButton.setToolTipText(this.$$$getMessageFromBundle$$$("lang", "config.add"));
        listEditBar.add(addButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(30, 30), new Dimension(30, 30), new Dimension(30, 30), 0, false));
        removeButton = new JButton();
        removeButton.setBorderPainted(false);
        removeButton.setIcon(new ImageIcon(getClass().getResource("/icon/minus.png")));
        removeButton.setToolTipText(this.$$$getMessageFromBundle$$$("lang", "configuration.delete"));
        listEditBar.add(removeButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(30, 30), new Dimension(30, 30), new Dimension(30, 30), 0, false));
        final Spacer spacer1 = new Spacer();
        listEditBar.add(spacer1, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        duplicateButton = new JButton();
        duplicateButton.setBorderPainted(false);
        duplicateButton.setIcon(new ImageIcon(getClass().getResource("/icon/copy.png")));
        duplicateButton.setToolTipText(this.$$$getMessageFromBundle$$$("lang", "config.add"));
        listEditBar.add(duplicateButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(30, 30), new Dimension(30, 30), new Dimension(30, 30), 0, false));
    }

    private String $$$getMessageFromBundle$$$(String path, String key) {
        ResourceBundle bundle;
        try {
            Class<?> thisClass = this.getClass();
            if ($$$cachedGetBundleMethod$$$ == null) {
                Class<?> dynamicBundleClass = thisClass.getClassLoader().loadClass("com.intellij.DynamicBundle");
                $$$cachedGetBundleMethod$$$ = dynamicBundleClass.getMethod("getBundle", String.class, Class.class);
            }
            bundle = (ResourceBundle) $$$cachedGetBundleMethod$$$.invoke(null, path, thisClass);
        } catch (Exception e) {
            bundle = ResourceBundle.getBundle(path);
        }
        return bundle.getString(key);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return editableList;
    }
}
